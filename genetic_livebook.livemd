# Genetic One Max

```elixir
Mix.install([
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"}
])

alias VegaLite, as: Vl
```

## Setup

```elixir
chart =
  Vl.new(width: 700, height: 300)
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "generation", type: :ordinal)
  |> Vl.encode_field(:y, "best", type: :quantitative)
  |> Vl.encode_field(:color, "algo", type: :nominal)
  |> Kino.VegaLite.new()
  |> Kino.render()

:ok
```

## Algorithm

```elixir
# Genetic algorithm for the one-max problem
#   Starting with a random distribution of bitstrings introduces
#   solutions with sufficiently different characteristics.
#   This helps to avoid premature convergence.
population = for _ <- 1..100, do: for(_ <- 1..1000, do: Enum.random(0..1))

evaluate = fn population ->
  # sort population by sum in descending order
  Enum.sort_by(population, &Enum.sum/1, &>=/2)
end

selection = fn population ->
  population
  |> Enum.chunk_every(2)
  |> Enum.map(&List.to_tuple(&1))
end

crossover = fn population ->
  population
  |> Enum.reduce(
    [],
    fn {p1, p2}, acc ->
      # extract individual chromosomes for each parent
      # crossover point is a uniformly distributed random number
      cx_point = :rand.uniform(1000)
      # create new child from p1 and p2
      {{h1, t1}, {h2, t2}} = {
        Enum.split(p1, cx_point),
        Enum.split(p2, cx_point)
      }

      # recombine with tails swapped to create new child
      # known as single-point crossover
      [h1 ++ t2, h2 ++ t1 | acc]
    end
  )
end

mutation = fn population ->
  # Doing this actually preserves the fitness of the chromosome;
  #  however, it also prevents the parents from becoming too similar
  #  before they crossover.
  population
  |> Enum.map(fn chromosome ->
    # 5% probability of mutation
    if :rand.uniform() < 0.05 do
      Enum.shuffle(chromosome)
    else
      chromosome
    end
  end)
end

report = fn data ->
  IO.inspect(data)
  msg = "\r [algo: #{data.algo} gen: #{data.generation}] Current Best: #{data.best}"
  IO.write(msg)

  if Integer.mod(data.generation, 100) == 0 do
    Kino.VegaLite.push(chart, data)
  end
end

:ok
```

```elixir
# recursively mutate the population
algorithm = fn population, algorithm, generation, mutation, name ->
  # select current best solution, that with the highest fitness
  best =
    population
    |> Enum.max_by(&Enum.sum/1)
    |> Enum.sum()

  report.(%{generation: generation, best: best, algo: name})

  if best == 1000 do
    best
  else
    population
    |> evaluate.()
    |> selection.()
    |> crossover.()
    |> mutation.()
    |> algorithm.(algorithm, generation + 1, mutation, name)
  end
end
```

## Evaluation

```elixir
# With Mutation
Task.start(fn -> algorithm.(population, algorithm, 0, mutation, "5% mutation") end)
```

```elixir
# No Mutation
Task.start(fn -> algorithm.(population, algorithm, 0, & &1, "basic") end)
```
